rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the owner of a document
    function isOwner(docData) {
      return request.auth.uid == docData.ownerUID;
    }

    // Helper function to check if user is a member of a household
    // (Needs to read the household document)
    function isHouseholdMember(householdId) {
      return isAuthenticated() && get(/databases/$(database)/documents/households/$(householdId)).data.memberUIDs.hasAny([request.auth.uid]);
    }

    // Helper function to check if user is the owner of a pet
    // (Needs to read the pet document)
    function isPetOwner(petId) {
        return isAuthenticated() && get(/databases/$(database)/documents/pets/$(petId)).data.ownerUID == request.auth.uid;
    }

    // Helper function to check if user has access to a pet either as owner or household member
    function hasPetAccess(petId) {
      let petDoc = get(/databases/$(database)/documents/pets/$(petId)).data;
      return isAuthenticated() && (
        petDoc.ownerUID == request.auth.uid ||
        (petDoc.householdID != null && isHouseholdMember(petDoc.householdID))
      );
    }

    // Households
    // - Users can create households (they become owner & member).
    // - Owners can update household (e.g., name, members - more granular rules for members later).
    // - Members can read household details.
    // - Only owners can delete households (potentially with checks if pets are still linked).
    match /households/{householdId} {
      allow read: if isAuthenticated() && resource.data.memberUIDs.hasAny([request.auth.uid]);

      allow create: if isAuthenticated() &&
                       request.resource.data.ownerUID == request.auth.uid &&
                       request.resource.data.memberUIDs.hasAll([request.auth.uid]) &&
                       request.resource.data.keys().hasAll(['householdName', 'ownerUID', 'memberUIDs', 'createdTimestamp']) &&
                       request.resource.data.householdName is string &&
                       request.resource.data.memberUIDs is list;

      allow update: if isAuthenticated() && isOwner(resource.data);
      // TODO: More granular control for updating memberUIDs (e.g. owner can add/remove, members can remove themselves).
      // For now, only owner can update anything.
      // Example for allowing members to remove themselves:
      // allow update (writeFields: ['memberUIDs']): if isAuthenticated() &&
      //                                              resource.data.memberUIDs.hasAny([request.auth.uid]) &&
      //                                              !request.resource.data.memberUIDs.hasAny([request.auth.uid]); // User is removing themselves

      allow delete: if isAuthenticated() && isOwner(resource.data);
      // Consider adding a rule that household cannot be deleted if pets are linked to it,
      // or handle pet disassociation / deletion via cloud functions.
    }

    // Pets
    // - Users can create pets (they become owner). Pet can optionally be linked to a household they are a member of.
    // - Owners can update/delete their pets.
    // - Household members (if pet is shared with a household) can read pet details.
    // - (Future) Household members might be given write access to specific fields or activities for shared pets.
    match /pets/{petId} {
      allow read: if hasPetAccess(petId);

      allow create: if isAuthenticated() &&
                       request.resource.data.ownerUID == request.auth.uid &&
                       (request.resource.data.householdID == null || isHouseholdMember(request.resource.data.householdID));
                       // Ensure all required fields are present
                       // request.resource.data.keys().hasAll(['name', 'ownerUID', ...]);
                       // request.resource.data.name is string;

      allow update: if isAuthenticated() && isOwner(resource.data);
      // TODO: Allow household members to update certain fields if needed (e.g. notes on a pet).
      // This would require checking if request.auth.uid is in get(/databases/$(database)/documents/households/$(resource.data.householdID)).data.memberUIDs
      // And then specifying which fields can be updated: allow update (writeFields: ['notes']) ...

      allow delete: if isAuthenticated() && isOwner(resource.data);
    }

    // Activities
    // - Users can create activities for pets they have access to (owner or household member).
    // - Users can read activities for pets they have access to.
    // - Only the user who recorded an activity (or pet owner) can update/delete it.
    match /activities/{activityId} {
      allow read: if isAuthenticated() && hasPetAccess(resource.data.petID);

      allow create: if isAuthenticated() &&
                       hasPetAccess(request.resource.data.petID) &&
                       request.resource.data.userID == request.auth.uid;
                       // Ensure all required fields are present
                       // request.resource.data.keys().hasAll(['petID', 'userID', 'timestamp', 'activityType']);
                       // request.resource.data.activityType is string;

      allow update: if isAuthenticated() &&
                       (request.auth.uid == resource.data.userID || isPetOwner(resource.data.petID));
                       // Allow original recorder or pet owner to update.

      allow delete: if isAuthenticated() &&
                       (request.auth.uid == resource.data.userID || isPetOwner(resource.data.petID));
                       // Allow original recorder or pet owner to delete.
    }
  }
}
